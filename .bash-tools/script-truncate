#!/usr/bin/env node

'use strict'

const { isString } = require('util')

if (!isString(process.argv[2])) {
  console.log(`usage: ${process.argv[1]} 80 'some miltiple string'`)
  process.exit(0)
}

const clrReset = '\u001B[0m'
const stringWidth = require('string-width')
const isFullwidthCodePoint = require('is-fullwidth-code-point')

const AnsiRE = require('ansi-regex')
const column = isString(process.argv[3]) ? parseInt(process.argv[2]) : 80
const input = isString(process.argv[3]) ? process.argv[3].trim() : process.argv[2].trim()

const lines = input.replace(/\t/g, '    ').split(/\r?\n\r?/g)
const output = lines.map(line => truncateLine(column, line)).join('\n')
console.log(output)

function truncateLine(column, line) {
  if (stringWidth(line) <= column)
    return line + clrReset

  if (column <= 3)
    throw new Error(`[column=${column}] should be gt 3!`)

  const ansiRE = AnsiRE()
  const ansiList = []
  let lastMatch
  while (lastMatch = ansiRE.exec(line)) {
    ansiList.push({
      length: lastMatch[0].length,
      string: lastMatch[0],
      index: lastMatch.index
    })
  }

  const limit = column - 3
  let width = 0
  let index = 0
  let result = ''

  while (width < limit && result.length <= line.length) {
    const asni = ansiList.find(asni => asni.index === index)
    if (asni) {
      index += asni.length
      result += asni.string
      continue
    }

    // control characters
    // combining characters
    // surrogates
    const code = line.codePointAt(index)
    const char = line[index]
    if (code <= 0x1F || (code >= 0x7F && code <= 0x9F) || (code >= 0x300 && code <= 0x36F) || code > 0xFFFF) {
      index++
      result += char
      continue
    }

    index++
    result += char
    width += isFullwidthCodePoint(char) ? 2 : 1
  }

  return result + clrReset + '...'
}
