#!/usr/bin/env node

'use strict'

const { isString } = require('util')

if (!isString(process.argv[7])) {
  console.log(`usage: ${process.argv[1]} 80 yellow 'some miltiple string' 90 red 'another miltiple string'`)
  console.log(process.argv)
  process.exit(0)
}

const chalk = require('chalk')
const AnsiRE = require('ansi-regex')
const cliBoxes = require('cli-boxes').single
const stringWidth = require('string-width')
const isFullwidthCodePoint = require('is-fullwidth-code-point')

const clrReset = '\u001B[0m'

const colsA = parseInt(process.argv[2]) - 2
const colsB = parseInt(process.argv[5]) - 2

const colorA = chalk[process.argv[3].trim()]
const colorB = chalk[process.argv[6].trim()]

const sideA = process.argv[4].trim().replace(/\r?\n\r?/g, '\n')
const sideB = process.argv[7].trim().replace(/\r?\n\r?/g, '\n')

const linesA = sideA.split(/\n/g)
const linesB = sideB.split(/\n/g)

const lengthA = linesA.length
const lengthB = linesB.length

const topA = colorA(cliBoxes.topLeft + cliBoxes.horizontal.repeat(colsA) + cliBoxes.topRight)
const topB = colorB(cliBoxes.topLeft + cliBoxes.horizontal.repeat(colsB) + cliBoxes.topRight)

const bottomA = colorA(cliBoxes.bottomLeft + cliBoxes.horizontal.repeat(colsA) + cliBoxes.bottomRight)
const bottomB = colorB(cliBoxes.bottomLeft + cliBoxes.horizontal.repeat(colsB) + cliBoxes.bottomRight)

const vertA = colorA(cliBoxes.vertical)
const vertB = colorB(cliBoxes.vertical)

let output = (topA + topB + '\n')

for (let index = 0; index !== Math.max(lengthA, lengthB); index++) {
  const lineA = linesA[index] || ''
  const lineB = linesB[index] || ''
  const widthA = stringWidth(lineA)
  const widthB = stringWidth(lineB)
  const padA = ' '.repeat(Math.max(colsA - widthA, 0))
  const padB = ' '.repeat(Math.max(colsB - widthB, 0))
  const fullA = lineA + padA
  const fullB = lineB + padB
  const trncA = truncateLine(colsA, fullA)
  const trncB = truncateLine(colsB, fullB)
  output += (vertA + trncA + vertA + vertB + trncB + vertB + '\n')
}

output += (bottomA + bottomB)
console.log(output)

function truncateLine(column, line) {
  if (stringWidth(line) <= column)
    return line + clrReset

  if (column <= 3)
    throw new Error(`[column=${column}] should be gt 3!`)

  const ansiRE = AnsiRE()
  const ansiList = []
  let lastMatch
  while (lastMatch = ansiRE.exec(line)) {
    ansiList.push({
      length: lastMatch[0].length,
      string: lastMatch[0],
      index: lastMatch.index
    })
  }

  const limit = column - 3
  let width = 0
  let index = 0
  let result = ''

  while (width < limit && result.length <= line.length) {
    const asni = ansiList.find(asni => asni.index === index)
    if (asni) {
      index += asni.length
      result += asni.string
      continue
    }

    // control characters
    // combining characters
    // surrogates
    const code = line.codePointAt(index)
    const char = line[index]
    if (code <= 0x1F || (code >= 0x7F && code <= 0x9F) || (code >= 0x300 && code <= 0x36F) || code > 0xFFFF) {
      index++
      result += char
      continue
    }

    index++
    result += char
    width += isFullwidthCodePoint(char) ? 2 : 1
  }

  return result + clrReset + '...'
}
