#! /usr/bin/env bash


# GIT heart FZF
# -------------

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short \
    | sed 's/"//g' \
    | fzf --preview \
        'export NOT_STAGED="$(git diff --color=always -- {2..-1} | sed 1,4d;)" && [[ -n "$NOT_STAGED" ]] && echo -e "\e[1;44m    NOT STAGED    \e[0m    \e[0m" && echo "$NOT_STAGED"; \
         export STAGED="$(git diff --staged --color=always -- {2..-1} | sed 1,4d;)" && [[ -n "$STAGED" ]] && echo -e "\e[0;94m\e[1;107m    STAGED    \e[0m" && echo "$STAGED"; \
         [[ -z "$NOT_STAGED" ]] && [[ -z "$STAGED" ]] && echo -e "\e[1;41m    FILE    \e[0m" && \
            ((file --mime {2..-1} | grep directory > /dev/null 2>&1 && ls --color=always --group-directories-first -1 -lah {2..-1}) \
          || (file --mime {2..-1} | grep binary > /dev/null 2>&1 && echo {2..-1} is a binary file) \
          || (highlight -O ansi -l {} || coderay {2..-1} || cat {2..-1})) 2> /dev/null | head -n 500' \
    | cut -c4- \
    | sed 's/.* -> //' \
    | sed 's/\s/\\ /g'
}

gb() {
  is_in_git_repo || return
  git branch -a --color=always \
    | grep -v -E '/HEAD.{0,3}\s' \
    | fzf --preview-window right:70% --preview 'git log-hist $(cut -c 3- <<< {}) | head -n 100' \
    | sed 's/^..//' \
    | cut -d' ' -f1 \
    | sed 's#^remotes/##'
}

gt() {
  is_in_git_repo || return
  git tag --sort -version:refname | fzf --preview 'git show --color=always {}'
}

gh() {
  is_in_git_repo || return
  git log --graph --color=always --date=format:'%Y-%m-%d %H:%M' --abbrev-commit --format='%C(magenta)%h%C(auto)%d %C(reset)%s%C(reset)' \
    | fzf --preview 'export COMMIT="$(echo {} | grep -E -ho " [a-z0-9]+ " | head -n 1 | sed "s/ //g")" && [[ -n "$COMMIT" ]] && git view-commit $COMMIT' \
    | grep -o "[a-f0-9]\{7,\}"
}

gr() {
  local branch="$(git branch-name)"
  local remote="$(git remote | head -n 1)"
  local remote_branch="$(git show-branch "remotes/$remote/$branch" 2>/dev/null)"
  local base_branch="$(test "$remote_branch" && echo "$remote/$branch" || echo master)"
  local last_commit="$(git log --format="%h" $base_branch..HEAD | tail -n1)"

  git diff --name-only HEAD..$last_commit | last_commit="$last_commit" fzf --preview 'git diff --color=always HEAD..$last_commit -- {}' | sed 's/\s/\\ /g'
}

gl() {
  git diff --name-only HEAD..HEAD^ | last_commit="$last_commit" fzf --preview 'git diff --color=always HEAD..HEAD^ -- {}' | sed 's/\s/\\ /g'
}

if [ -n "$PS1" ]; then
  bind '"\er": redraw-current-line'
  bind '"\C-g\C-f": "$(gf)\e\C-e\er"'
  bind '"\C-g\C-b": "$(gb)\e\C-e\er"'
  bind '"\C-g\C-t": "$(gt)\e\C-e\er"'
  bind '"\C-g\C-h": "$(gh)\e\C-e\er"'
  bind '"\C-g\C-r": "$(gr)\e\C-e\er"'
  bind '"\C-g\C-l": "$(gl)\e\C-e\er"'
fi
